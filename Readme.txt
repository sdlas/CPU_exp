单周期
一、初始化
给寄存器1和2分别赋值7，9
给存储器1赋值3
二、执行指令
1.算术/逻辑运算指令
(1)ADD $3 $1 $2;
000000 00001 00010 00011 00000 100000
预期$3=16
(2)SUB $4 $3 $1;
000000 00011 00001 00100 00000 100010
预期$4=9//这里用到了刚刚写入的3，如果结果正确，则验证了寄存器写入功能无误
(3)AND $5 $1 $2 ;
000000 00001 00010 00101 00000 100100
预期$5=1;(0001)
(4)OR $6 $1 $2;
000000 00001 00010 00110 00000 100101
预期$6=31;(1111)
(5)SLT $7 $1 $2;
000000 00001 00010 00111 00000 101010
预期$7=1;
以上结果查看ALUout信号求证
2.存储器访问指令
(1)SW $3 1 ($5)
101011 00101 00011 0000000000000001
预期存储器2地址存储值为16
(2)LW $0 1（$5）
100011 00101 00000 0000000000000001
预期$0=16
查看W_data求证,若W_data=16说明上个指令向地址2写入数据成功，且本条指令从地址2读出指令成功
3.程序转移指令
(1）BEQ $0 $3 2
000100 00000 00011 0000000000000010
预期结果
PC=4*11
(2) J 0
000010 00000000000000000000000000
预期结果
跳到开头重新走一遍

//仍用单周期使用过的指令来实验流水CPU
第一个时钟周期
指令(1)加入
ADD $3 $1 $2;
000000 00001 00010 00011 00000 100000
预期结果
FI_IDinput
	Inst=000000 00001 00010 00011 00000 100000
FI_IDoutput
	IR=000000 00001 00010 00011 00000 100000
	FI_ID_NPC1=4
	FI_ID_reg1=1
	FI_ID_reg2=2
	Opcode_FI=000000
R_data1=7
R_data2=9//寄存器值读出
第二个时钟周期
指令(2)加入
AND $4 $1 $2;
000000 00001 00010 00100 00000 100100
预期结果
FI_ID层
	FI_IDinput
		Inst=000000 00001 00010 00100 00000 100100
	FI_IDoutput
		IR=000000 00001 00010 00100 00000 100100
		FI_ID_NPC1=8
		FI_ID_reg1=1
		FI_ID_reg2=2
		Opcode_FI=000000
	R_data1=7
	R_data2=9//寄存器值读出

//流水设计完毕，现在设计一个简单的程序来验证结果
私自加了个乘法（Func=101011,ALUCtrl=111）
程序目标：计算存储器1地址处的数的阶乘
初始化0号地址的值为0（方便LW取数）
初始化1号地址的值为1(为了判0,因为咱没有带立即数的BEQ)
初始化3号寄存器的值为1(方便乘法运算)
0: 将存储器0地址处的数加载到0号寄存器中
	LW
	100011 00000 00000 0000000000000000
4: 将存储器1地址处的数加载到1号寄存器中		//因为这里的Rs是上一个指令要修改的寄存器，故可能有数据冒险，采用后退法避免，流水线阻塞三个周期
	LW
	100011 00000 00001 0000000000000001
8:将存储器2地址处的数加载到2号寄存器中			//无数据冒险，无阻塞
	LW
	100011 00000 00010 0000000000000010

12：判断2号寄存器中的数是否为1，若是1，则直接跳转到28
	BEQ
	000100 00010 00001 0000000000000011
16: 计算2号寄存器和3号寄存器的积，并将结果存入3号寄存器
	MUL
	000000 00010 00011 00011 00000 101011

20: 2号寄存器减1号寄存器，并将值存入2号寄存器
	SUB
	000000 00010 00001 00010 00000 100010
24：跳转到12
	J
	000010 00000000000000000000000011
28：将3号寄存器(结果)的值存入存储器2地址处
	SW
	101011 00000 00011 0000000000000010
	









